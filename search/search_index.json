{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Stanford Self-Study","text":"<p>This is a curated, applied learning journey through Stanford AI/ML/Robotics courses.</p> <p>Principles - Distill \u2192 Keep only what\u2019s essential - Apply \u2192 Every concept gets a runnable example - Reflect \u2192 Short weekly notes on what changed in my understanding</p> <p>\u26a0\ufe0f I don\u2019t host copyrighted PDFs here. I link to official course pages and write my own notes and solutions.</p>"},{"location":"#start-here","title":"Start here","text":"<ul> <li>Read the How to Use</li> <li>Browse Courses in the left sidebar</li> <li>Check the repo\u2019s <code>courses/</code> for raw notebooks/code</li> </ul>"},{"location":"how-to-use/","title":"How to Use","text":""},{"location":"how-to-use/#for-readers","title":"For readers","text":"<ul> <li>Use the left sidebar to navigate by course and module.</li> <li>Each module page includes:</li> <li>A distilled summary (my words)</li> <li>Key formulas (with LaTeX)</li> <li>A link to the corresponding code/notebook</li> <li>(If applicable) a short reflection</li> </ul>"},{"location":"how-to-use/#for-contributors-prs-welcome","title":"For contributors (PRs welcome)","text":"<ol> <li>Fork the repo and create a branch.</li> <li>Keep notes in your own words; do not paste course PDFs.</li> <li>Add runnable examples where possible.</li> <li>If you add a module, use the scaffolder:</li> </ol> <pre><code>python scripts/create_module.py --course CS229 --slug 02-logistic-regression --title \"Logistic Regression\"\n</code></pre> <p>This creates <code>courses/CS229/02-logistic-regression/notes.md</code> and a docs page stub.</p>"},{"location":"how-to-use/#honor-code","title":"Honor code","text":"<p>Do not share restricted assignment prompts or solutions from active course offerings.</p>"},{"location":"roadmap/","title":"Roadmap","text":"<p>$content = @'</p>"},{"location":"roadmap/#roadmap-self-study-phases","title":"Roadmap \u2014 Self-Study Phases","text":"<p>A phased plan to progress from foundations to advanced AI, agents, and robotics, with social-impact breathing space.</p>"},{"location":"roadmap/#phase-1-core-foundations","title":"Phase 1 \u2014 Core Foundations","text":"<p>(Get the math, probability, and basic CS building blocks out of the way, while doing something social-impact focused on the side)</p> <ul> <li>Main Tech Courses:</li> <li>CS103/CS103A \u2013 Mathematical Foundations of Computing \u2013 Logic, proofs, sets.</li> <li>CS109 \u2013 Probability for Computer Scientists \u2013 Essential for ML &amp; robotics reasoning.</li> <li>Breather / Social Good:</li> <li>CS21Si \u2013 AI for Social Good \u2013 Project-based, socially relevant applications.</li> </ul>"},{"location":"roadmap/#phase-2-intro-to-ai-hands-on-systems","title":"Phase 2 \u2014 Intro to AI &amp; Hands-On Systems","text":"<p>(Learn AI principles while building real systems)</p> <ul> <li>Main Tech Courses:</li> <li>CS221 \u2013 Artificial Intelligence: Principles and Techniques \u2013 Search, MDPs, Bayesian inference.</li> <li>CS123 \u2013 A Hands-On Introduction to Building AI-Enabled Systems \u2013 Build working AI applications.</li> <li>Breather / Social Good:</li> <li>CS25 \u2013 Transformers United V5 \u2013 Engaging talks, guest lectures, cutting-edge transformer work without heavy math load.</li> </ul>"},{"location":"roadmap/#phase-3-deep-learning-core","title":"Phase 3 \u2014 Deep Learning Core","text":"<p>(Move into deep neural networks and their applications)</p> <ul> <li>Main Tech Courses:</li> <li>CS224N \u2013 Natural Language Processing with Deep Learning \u2013 Build NLP systems with transformers.</li> <li>CS224R \u2013 Deep Reinforcement Learning \u2013 RL methods for agents and robotics.</li> <li>Breather / Social Good:</li> <li>CS329X \u2013 Human-Centered LLMs \u2013 Design LLMs for usability, safety, and ethics.</li> </ul>"},{"location":"roadmap/#phase-4-advanced-ai-theory-agents","title":"Phase 4 \u2014 Advanced AI Theory &amp; Agents","text":"<p>(Push into higher-level AI reasoning and self-improving systems)</p> <ul> <li>Main Tech Courses:</li> <li>CS234 \u2013 Reinforcement Learning \u2013 Policy gradients, deep Q-networks, exploration.</li> <li>CS336 \u2013 Language Modeling from Scratch \u2013 From dataset prep to training large models.</li> <li>Breather / Social Good:</li> <li>CS329A \u2013 Self-Improving AI Agents \u2013 How to make agents learn from experience autonomously.</li> </ul>"},{"location":"roadmap/#phase-5-robotics-specific-mastery","title":"Phase 5 \u2014 Robotics-Specific Mastery","text":"<p>(Apply AI knowledge to physical autonomous systems)</p> <ul> <li>Main Tech Courses:</li> <li>Principles of Robot Autonomy II \u2013 Planning, perception, and coordination in robots.</li> <li>CS224G \u2013 Reinforcement Learning Winter 2025 \u2013 Robotics-oriented RL applications.</li> <li>Breather / Social Good:</li> <li>CS221N \u2013 Natural Language Processing with\u2026 (more specialized NLP; tie into social robotics)</li> </ul>"},{"location":"roadmap/#phase-6-specialized-mathematical-depth","title":"Phase 6 \u2014 Specialized &amp; Mathematical Depth","text":"<p>(Get niche skills for research and optimization)</p> <ul> <li>Main Tech Courses:</li> <li>CS239 \u2013 Eigenvalue Computations \u2013 For large-scale optimization &amp; scientific computing.</li> <li>CS224W \u2013 Machine Learning with Graphs \u2013 Graph ML for social networks, knowledge graphs.</li> <li>Breather / Social Good:</li> <li>CS21Si \u2013 Return for a new project focus, integrating robotics/AI from earlier phases.</li> </ul>"},{"location":"roadmap/#tracking-checklist","title":"Tracking (checklist)","text":"<ul> <li> CS103/CS103A \u2014 Mathematical Foundations of Computing</li> <li> CS109 \u2014 Probability for Computer Scientists</li> <li> CS221 \u2014 AI: Principles and Techniques</li> <li> CS123 \u2014 Hands-On AI-Enabled Systems</li> <li> CS224N \u2014 NLP with Deep Learning</li> <li> CS224R \u2014 Deep RL</li> <li> CS234 \u2014 Reinforcement Learning</li> <li> CS336 \u2014 Language Modeling from Scratch</li> <li> CS224W \u2014 Machine Learning with Graphs</li> <li> CS239 \u2014 Eigenvalue Computations</li> <li> Principles of Robot Autonomy II</li> <li> CS224G \u2014 RL (Robotics)</li> <li> CS25 \u2014 Transformers United (V5)</li> <li> CS329X \u2014 Human-Centered LLMs</li> <li> CS329A \u2014 Self-Improving AI Agents</li> <li> CS21Si \u2014 AI for Social Good (Phase 1)</li> <li> CS21Si \u2014 AI for Social Good (Phase 6 revisit)</li> </ul>"},{"location":"roadmap/#how-to-use-this-roadmap","title":"How to use this roadmap","text":"<ul> <li>Draft deep notes and experiments in <code>courses/&lt;COURSE&gt;/&lt;MODULE&gt;/</code>.</li> <li>Distill key insights and formulas into <code>docs/courses/&lt;COURSE&gt;/&lt;MODULE&gt;.md</code>.</li> <li>Update this page\u2019s checklist with links to your new module pages.</li> <li>Keep a weekly reflection in the repo README or a docs page of your choice. '@ New-Item -ItemType Directory -Force docs | Out-Null Set-Content -Path docs/roadmap.md -Value $content -Encoding UTF8</li> </ul>"},{"location":"style/","title":"Style Guide","text":"<ul> <li>Voice: concise, first person, active.</li> <li>Math: KaTeX via <code>$...$</code> or <code>$$...$$</code>.</li> <li>Code: prefer minimal, executable snippets over long listings.</li> <li>Figures: put images in <code>docs/assets/images/</code> and reference with relative paths.</li> <li>Attribution: link official course pages at each course index.</li> </ul> <p>Example inline math: \\(J(\\\\theta)=\\\\frac{1}{2m}\\\\sum_i(h_\\\\theta(x^{(i)})-y^{(i)})^2\\)</p>"},{"location":"courses/CS103A/","title":"CS103/CS103A \u2014 Mathematical Foundations of Computing","text":"<p>Coming soon.</p>"},{"location":"courses/CS103A/01-intro-set-theory/","title":"CS103 \u2014 Lecture 1: Introduction to Set Theory &amp; Computation Foundations","text":""},{"location":"courses/CS103A/01-intro-set-theory/#learning-goals","title":"Learning Goals","text":"<ul> <li>Understand the scope of CS103:</li> <li>Computability theory</li> <li>Complexity theory</li> <li>Discrete mathematics</li> <li>Learn fundamental set theory concepts and notation</li> <li>Understand infinite sets and different sizes of infinity</li> <li>Recognize the relationship between programs, strings, and problems</li> <li>Appreciate the limits of computation (some problems are unsolvable)</li> </ul>"},{"location":"courses/CS103A/01-intro-set-theory/#key-formulas-notation","title":"Key Formulas &amp; Notation","text":"<ul> <li>Set Notation: <code>{a, b, c}</code> \u2014 unordered collection of distinct elements</li> <li>Element notation: <code>x \u2208 S</code> (x is an element of S), <code>x \u2209 S</code> (x is not an element)</li> <li>Equality of sets: Same elements, order irrelevant, duplicates ignored</li> <li>Special sets:</li> <li>Empty set: <code>\u2205</code></li> <li>Natural numbers: <code>\u2115 = {0, 1, 2, 3, \u2026}</code></li> <li>Integers: <code>\u2124 = {\u2026, -2, -1, 0, 1, 2, \u2026}</code></li> <li>Real numbers: <code>\u211d</code></li> <li>Set-builder notation: <code>{x \u2208 S | property(x)}</code></li> <li>Example: <code>{n \u2208 \u2115 | n is even} = {0, 2, 4, \u2026}</code></li> <li>Common operations:</li> <li>Union: <code>A \u222a B</code></li> <li>Intersection: <code>A \u2229 B</code></li> <li>Difference: <code>A \\ B</code></li> <li>Symmetric difference: <code>A \u0394 B</code></li> <li>Subsets: <code>S \u2286 T</code> if every element of S is in T   Power set: <code>\u2118(S) = { T | T \u2286 S }</code></li> <li>Cardinality: <code>|S|</code> = number of elements in S   Infinite cardinality: <code>|\u2115| = \u2135\u2080</code></li> <li>Cantor\u2019s Theorem: <code>|S| &lt; |\u2118(S)|</code> \u2014 Every set is smaller than its power set</li> </ul>"},{"location":"courses/CS103A/01-intro-set-theory/#notes","title":"Notes","text":""},{"location":"courses/CS103A/01-intro-set-theory/#course-focus","title":"Course Focus","text":"<ul> <li>Explore \"laws of physics\" in CS \u2014 fundamental limits on what computers can and cannot do</li> <li>Emphasis on proof-based reasoning, not just calculations</li> <li>No advanced math prerequisites; high school algebra is enough</li> </ul>"},{"location":"courses/CS103A/01-intro-set-theory/#sets","title":"Sets","text":"<ul> <li>Sets are unordered, contain distinct elements, and can include other sets</li> <li>Empty set <code>\u2205</code> has no elements; <code>{\u2205}</code> is a set containing the empty set</li> <li>Important distinction: An element vs. a set containing that element   e.g., <code>1 \u2260 {1}</code>, <code>\u2205 \u2260 {\u2205}</code></li> <li>Duplicates in set definitions are ignored</li> <li>Infinite sets like <code>\u2115</code>, <code>\u2124</code>, and <code>\u211d</code> exist; not all infinities are equal in size</li> </ul>"},{"location":"courses/CS103A/01-intro-set-theory/#infinite-cardinalities","title":"Infinite Cardinalities","text":"<ul> <li>Same size rule: Two sets have the same size if their elements can be paired 1:1 with none left over</li> <li><code>\u2115</code> and the even numbers have the same size (<code>n \u2194 2n</code>)</li> <li><code>\u2115</code> and <code>\u2124</code> have the same size (pair non-negatives with positives, negatives with odds)</li> <li>Cantor\u2019s diagonalization: <code>\u2118(S)</code> is strictly larger than <code>S</code>   \u2192 Not all infinities are equal; there are infinitely many infinities</li> </ul>"},{"location":"courses/CS103A/01-intro-set-theory/#programs-strings-and-problems","title":"Programs, Strings, and Problems","text":"<ul> <li>Every computer program is a finite string of characters</li> <li><code>|Programs| \u2264 |Strings|</code></li> <li>Problems can be represented as sets of strings (e.g., \"given a string, determine if it belongs to set S\")</li> <li>Cantor\u2019s theorem implies: <code>|Strings| &lt; |\u2118(Strings)| \u2264 |Problems|</code></li> <li>Therefore: <code>|Programs| &lt; |Problems|</code>   \u2192 There are more problems than programs; some problems are unsolvable by computers</li> <li>Shocking fact: For a random problem, probability of solvability \u2248 0</li> </ul>"},{"location":"courses/CS103A/01-intro-set-theory/#examples","title":"Examples","text":"<p>Even Natural Numbers:</p> \\[ E = \\{ n \\in \\mathbb{N} \\mid n \\text{ is even} \\} = \\{0, 2, 4, 6, \\dots\\} \\] <p>Cardinality: <code>|E| = |\u2115| = \u2135\u2080</code> (same size as natural numbers despite being \"smaller\" in content)</p>"},{"location":"courses/CS103A/01-intro-set-theory/#visual-diagrams","title":"Visual Diagrams","text":"<p>1) Set Relationships</p> <pre><code>A = {1, 2, 3}\nB = {3, 4, 5}\nUnion (A \u222a B): {1, 2, 3, 4, 5}\nIntersection (A \u2229 B): {3}\nDifference (A \\ B): {1, 2}\nSymmetric Difference (A \u0394 B): {1, 2, 4, 5}\n</code></pre> <p>2) Subset &amp; Power Set Example</p> <pre><code>S = {a, b}\n\u2118(S) = { \u2205, {a}, {b}, {a, b} }\n</code></pre> <p>3) Infinite Set Mapping (Bijection)</p> <pre><code>\u2115 and even numbers have same cardinality:\n0 \u2194 0\n1 \u2194 2\n2 \u2194 4\n3 \u2194 6\n...\n</code></pre> <p>4) Cantor\u2019s Diagonalization (Conceptual)</p> <ul> <li>List all subsets of a set</li> <li>Flip the nth element\u2019s membership in the nth subset</li> <li>Result: a subset not in the list \u2192 proves <code>|\u2118(S)| &gt; |S|</code></li> </ul>"},{"location":"courses/CS103A/01-intro-set-theory/#reflection","title":"Reflection","text":"<ul> <li>Sets are the foundation for understanding computation limits</li> <li>Cantor\u2019s theorem connects set theory directly to the impossibility of solving certain problems with computers</li> <li>This lecture reframed my view: Computation isn\u2019t just about algorithms \u2014 it\u2019s also about the inherent boundaries of what\u2019s possible</li> </ul>"},{"location":"courses/CS109/","title":"CS109  Probability for Computer Scientists","text":"<p>Coming soon.</p>"},{"location":"courses/CS123/","title":"CS123  A Hands-On Introduction to Building AI-Enabled Systems","text":"<p>Coming soon.</p>"},{"location":"courses/CS21Si/","title":"CS21Si  AI for Social Good","text":"<p>Coming soon.</p>"},{"location":"courses/CS221/","title":"CS221  Artificial Intelligence: Principles and Techniques","text":"<p>Coming soon.</p>"},{"location":"courses/CS221N/","title":"CS221N  Specialized NLP","text":"<p>Coming soon.</p>"},{"location":"courses/CS224G/","title":"CS224G  Reinforcement Learning (Robotics)","text":"<p>Coming soon.</p>"},{"location":"courses/CS224N/","title":"CS224N  Natural Language Processing with Deep Learning","text":"<p>Coming soon.</p>"},{"location":"courses/CS224R/","title":"CS224R  Deep Reinforcement Learning","text":"<p>Coming soon.</p>"},{"location":"courses/CS224W/","title":"CS224W  Machine Learning with Graphs","text":"<p>Coming soon.</p>"},{"location":"courses/CS229/","title":"CS229 \u2014 Machine Learning","text":"<p>Official: https://cs229.stanford.edu/ (link out to current archive)</p>"},{"location":"courses/CS229/#modules","title":"Modules","text":"<ul> <li>01 \u2014 Linear Regression</li> </ul>"},{"location":"courses/CS229/01-linear-regression/","title":"01 \u2014 Linear Regression","text":"<p>Learning goals - Derive the normal equation and interpret terms - Implement gradient descent and compare to closed-form solution</p> <p>Key formulas $$ \\theta = (X^TX)^{-1}X^Ty $$</p> <p>Notebook - <code>courses/CS229/01-linear-regression/example_project.ipynb</code></p> <p>Reflection - Normal equation is fast for low-dim problems but scales poorly; GD more flexible.</p>"},{"location":"courses/CS229/02-logistic-regression/","title":"02 \u2014 Logistic Regression","text":"<p>Learning goals - \u2026</p> <p>Key formulas - \u2026</p> <p>Notebook - <code>courses/CS229/02-logistic-regression/example_project.ipynb</code></p> <p>Reflection - \u2026</p>"},{"location":"courses/CS231n/","title":"CS231n \u2014 Convolutional Neural Networks for Visual Recognition","text":"<p>Official: https://cs231n.stanford.edu/</p>"},{"location":"courses/CS231n/#modules","title":"Modules","text":"<ul> <li>Coming soon</li> </ul>"},{"location":"courses/CS234/","title":"CS234  Reinforcement Learning","text":"<p>Coming soon.</p>"},{"location":"courses/CS239/","title":"CS239  Eigenvalue Computations","text":"<p>Coming soon.</p>"},{"location":"courses/CS25/","title":"CS25  Transformers United V5","text":"<p>Coming soon.</p>"},{"location":"courses/CS329A/","title":"CS329A  Self-Improving AI Agents","text":"<p>Coming soon.</p>"},{"location":"courses/CS329X/","title":"CS329X  Human-Centered LLMs","text":"<p>Coming soon.</p>"},{"location":"courses/CS336/","title":"CS336  Language Modeling from Scratch","text":"<p>Coming soon.</p>"},{"location":"courses/PRO2/","title":"Principles of Robot Autonomy II","text":"<p>Coming soon.</p>"},{"location":"courses/_templates/module-template/","title":"{{ NUMBER }} \u2014 {{ TITLE }}","text":"<p>Learning goals - \u2026</p> <p>Key formulas - \u2026</p> <p>Notebook - <code>courses/{{ COURSE }}/{{ SLUG }}/example_project.ipynb</code></p> <p>Reflection - \u2026</p>"}]}